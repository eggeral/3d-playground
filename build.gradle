buildscript {
    ext.kotlin_version = '1.1.51'

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'kotlin2js'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

compileKotlin2Js {
    kotlinOptions {
        outputFile = "$buildDir/classes/kotlin/main/${project.name}.js"
        moduleKind = "umd"
        main = "noCall"
        sourceMap = true
    }
}

compileTestKotlin2Js {
    kotlinOptions {
        outputFile = "$buildDir/classes/kotlin/test/${project.name}_test.js"
        moduleKind = "umd"
        sourceMap = true
    }
}


sourceSets {
    main {
        output.resourcesDir = "build/classes/kotlin/main"
    }
    test {
        output.resourcesDir = "build/classes/kotlin/test"
    }
}

classes.doLast() {
    // Copy kotlin.js and kotlin-meta.js from jar into out dir
    configurations.compile.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "${buildDir}/classes/kotlin/main/lib"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                (path.endsWith(".js") || path.endsWith(".map")) && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }

    configurations.testCompile.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "${buildDir}/classes/kotlin/test/lib"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                (path.endsWith(".js") || path.endsWith(".map")) && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }

}

apply plugin: 'com.moowork.node'

node {
    download = true
}

task installMocha(type: NpmTask) {
    args = ['install', 'mocha']
}

task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, installMocha]) {

    script = file('node_modules/.bin/mocha')
    args = [compileTestKotlin2Js.outputFile]

    execOverrides {
        it.environment "NODE_PATH", "${compileKotlin2Js.destinationDir}:${compileTestKotlin2Js.destinationDir}/lib"
    }
}

test.dependsOn runMocha

apply plugin: 'idea'
idea {
    module {
        outputDir file('build/classes/kotlin/main')
        testOutputDir file('build/classes/kotlin/test')
    }
}